<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring Cloud on Techresting</title>
    <link>https://anishpc.netlify.com/tags/spring-cloud/</link>
    <description>Recent content in Spring Cloud on Techresting</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://anishpc.netlify.com/tags/spring-cloud/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Netflix Hystrix with Spring Cloud</title>
      <link>https://anishpc.netlify.com/post/hystrix_spring_cloud/</link>
      <pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://anishpc.netlify.com/post/hystrix_spring_cloud/</guid>
      <description>Circuit Breaker Michael Nygard in this book &amp;ldquo;Release It&amp;rdquo; talks about the &amp;ldquo;Circuit Breaker&amp;rdquo; stability pattern which works very much inline with electrical circuit breakers which open the circuit on excess usage. Once the usage is back to normal, the circuit should close on its own. The Netflix Hystrix library has been built on this idea of circuit breaker for working with distributed systems.
Why Now In a single application (monolith or otherwise), failures can be caught as exceptions and handled accordingly.</description>
    </item>
    
  </channel>
</rss>